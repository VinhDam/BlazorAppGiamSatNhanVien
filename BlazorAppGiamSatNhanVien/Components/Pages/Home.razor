@page "/"
@inject IEmployeeRepository _employeeRepository
@inject IDepartmentRepository _departmentRepository
@inject IShiftRepository _shiftRepository
@inject ILocationRepository _locationRepository
@inject NavigationManager _navigationManager
@attribute [Authorize]

<PageTitle>Home</PageTitle>


@if (IsProcessing)
{
    <div class="w-100 h-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="d-flex gap-1 w-100">
        @foreach (var card in cardInfos)
        {
            <MudCard Class="w-100 h-100" Style="cursor:pointer" @onclick="()=>GoTo(card.Url)">
                <MudCardContent>
                    <MudText><MudIcon Icon="@card.Icon" Size="Size.Large" Class="me-2" />@card.Name</MudText>
                    <MudText>Số lượng: @card.Amount</MudText>
                </MudCardContent>
            </MudCard>
        }
    </div>
    <MudChart ChartType="ChartType.Bar"
              ChartSeries="@BarChart"
              XAxisLabels="@XAxisLabels"
              Width="100%"
              Height="350px" @bind-SelectedIndex="Index" ChartOptions="chartOptions">

    </MudChart>
}



@code {
    public bool IsProcessing { get; set; } = true;
    private IEnumerable<Employee> Employees { get; set; } = new List<Employee>();
    private IEnumerable<Department> Departments { get; set; } = new List<Department>();
    private IEnumerable<Shift> Shifts { get; set; } = new List<Shift>();
    private IEnumerable<Location> Locations { get; set; } = new List<Location>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadDatas();
        }
    }
    private async Task LoadDatas()
    {
        IsProcessing = true;
        StateHasChanged();
        await Task.Delay(1500);

        Employees = await _employeeRepository.GetAllAsync();
        Departments = await _departmentRepository.GetAllAsync();
        Shifts = await _shiftRepository.GetAllAsync();
        Locations = await _locationRepository.GetAllAsync();
        cardInfos = new List<CardInfo>()
        {
            new CardInfo(){ Icon=$"{Icons.Material.Filled.Person}", Name = "Nhân viên", Amount = Employees.Count(), Url = "/employee"},
            new CardInfo(){ Icon=$"{Icons.Material.Filled.Groups}", Name = "Phòng ban", Amount = Departments.Count(), Url = "/danhmuc/department"},
            new CardInfo(){ Icon=$"{Icons.Material.Filled.AccessTime}", Name = "Ca làm việc", Amount = Shifts.Count(), Url = "/danhmuc/shift"},
            new CardInfo(){ Icon=$"{Icons.Material.Filled.LocationOn}", Name = "Vị trí", Amount = Locations.Count(), Url = "/danhmuc/location"}
        };
        BarChart[0].Data = new double[] { Employees.Count(), Departments.Count(), Shifts.Count(), Locations.Count() };
        chartOptions.YAxisTicks = 5;
        chartOptions.XAxisLines = true;
        chartOptions.YAxisLines = true;

        IsProcessing = false;
        StateHasChanged();
    }

    private async Task GoTo(string url)
    {
        _navigationManager.NavigateTo(url);
    }
}
@code {
    class CardInfo
    {
        public string Icon { get; set; }
        public string Name { get; set; }
        public int Amount { get; set; }
        public string Url { get; set; }
    }
    private List<CardInfo> cardInfos { get; set; } = new List<CardInfo>();
}

<style>
    .mud-chart-bar {
        stroke-width: 50px;
    }

    .mud-charts-bar-series,
    .mud-charts-xaxis {
        transform: translateX(40px) scaleX(0.88);
    }
</style>
@code {
    public List<ChartSeries> BarChart = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "Số lượng"},
    };
    public string[] XAxisLabels = { "Nhân viên", "Phòng ban", "Ca làm việc", "Vị trí" };
    private int Index = -1;
    private ChartOptions chartOptions { get; set; } = new ChartOptions();
}